{"version":3,"sources":["NavBar/NavBar.js","ButtonItem/ButtonItem.js","TaskItem/TaskItem.js","InputField/InputField.js","MainSection/MainSection.js","Footer/Footer.js","App.js","serviceWorker.js","index.js"],"names":["NavBar","props","class","href","src","width","height","alt","type","data-toggle","data-target","id","ButtonItem","aria-pressed","autocomplete","text","TaskItem","InputField","placeholder","aria-label","aria-describedby","MainSection","App","className","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"yVAkCeA,MA9Bf,SAAgBC,GACZ,OACI,gCACI,yBAAKC,MAAM,sDACP,yBAAKA,MAAM,mBACP,uBAAGC,KAAK,MAAMD,MAAM,qBAChB,yBAAKE,IAAI,GAAGC,MAAM,KAAKC,OAAO,KAC1BJ,MAAM,2BAA2BK,IAAI,KAF7C,oBAKA,4BAAQC,KAAK,SAASN,MAAM,iBAAiBO,cAAY,WAAWC,cAAY,mBAC5E,0BAAMR,MAAM,yBAGhB,yBAAKA,MAAM,2BAA2BS,GAAG,kBACrC,yBAAKT,MAAM,cACP,uBAAGC,KAAK,MAAMD,MAAM,4BAApB,WACA,uBAAGC,KAAK,MAAMD,MAAM,qBAApB,cAEJ,yBAAKA,MAAM,sBACP,uBAAGC,KAAK,MAAMD,MAAM,qBAApB,YACA,uBAAGC,KAAK,MAAMD,MAAM,qBAApB,e,kBCbbU,MARf,SAAoBX,GAClB,OACE,4BAAQO,KAAK,SAASN,MAAM,kBAAkBO,cAAY,SAASI,eAAa,QAAQC,aAAa,OAClGb,EAAMc,OCSEC,MAXf,SAAkBf,GAChB,OACE,wBAAIC,MAAM,qEACPD,EAAMc,KACP,8BACA,kBAAC,EAAD,CAAYA,KAAK,gB,MCORE,MAbf,WACI,OACI,yBAAKf,MAAM,eACP,2BAAOM,KAAK,OAAON,MAAM,eAAegB,YAAY,mBAAmBC,aAAW,mBAC9EC,mBAAiB,iBACrB,yBAAKlB,MAAM,sBACP,4BAAQA,MAAM,4BAA4BM,KAAK,UAA/C,OACA,4BAAQN,MAAM,4BAA4BM,KAAK,UAA/C,YCoBDa,MAxBf,WACI,OACI,yBAAKnB,MAAM,aACP,yBAAKA,MAAM,aACP,4CACA,6BACA,kBAAC,EAAD,OAEJ,yBAAKA,MAAM,OACP,yBAAKA,MAAM,iCACP,yCACA,wBAAIA,MAAM,cACN,kBAAC,EAAD,CAAUa,KAAK,WACf,kBAAC,EAAD,CAAUA,KAAK,WACf,kBAAC,EAAD,CAAUA,KAAK,WACf,kBAAC,EAAD,CAAUA,KAAK,WACf,kBAAC,EAAD,CAAUA,KAAK,gB,MCCxBM,MApBf,WACI,OACI,yBAAKnB,MAAM,aACP,6BACA,gCACA,yBAAKA,MAAM,OACP,yBAAKA,MAAM,YACP,+DAEJ,yBAAKA,MAAM,0BACP,uBAAGC,KAAK,MAAMD,MAAM,aAApB,gBACA,0BAAMA,MAAM,mBAAZ,KACA,uBAAGC,KAAK,MAAMD,MAAM,aAApB,uBCCLoB,MAVf,WACE,OACE,yBAAKC,UAAU,OACb,kBAAC,EAAD,MACA,kBAAC,EAAD,MACA,kBAAC,EAAD,QCAcC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.aec292a0.chunk.js","sourcesContent":["import React from 'react';\n\nimport './NavBar.css';\n\nfunction NavBar(props) {\n    return (\n        <header>\n            <nav class=\"navbar navbar-expand-md navbar-light bg-light mb-3\">\n                <div class=\"container-fluid\">\n                    <a href=\"foo\" class=\"navbar-brand mr-3\">\n                        <img src=\"\" width=\"30\" height=\"30\"\n                            class=\"d-inline-block align-top\" alt=\"\" />\n                    Todo Application\n                </a>\n                    <button type=\"button\" class=\"navbar-toggler\" data-toggle=\"collapse\" data-target=\"#navbarCollapse\">\n                        <span class=\"navbar-toggler-icon\"></span>\n                    </button>\n\n                    <div class=\"collapse navbar-collapse\" id=\"navbarCollapse\">\n                        <div class=\"navbar-nav\">\n                            <a href=\"foo\" class=\"nav-item nav-link active\">Pending</a>\n                            <a href=\"foo\" class=\"nav-item nav-link\">Completed</a>\n                        </div>\n                        <div class=\"navbar-nav ml-auto\">\n                            <a href=\"foo\" class=\"nav-item nav-link\">Register</a>\n                            <a href=\"foo\" class=\"nav-item nav-link\">Login</a>\n                        </div>\n                    </div>\n                </div>\n            </nav>\n        </header>\n    );\n}\n\nexport default NavBar;\n","import React from 'react';\n\nimport './ButtonItem.css';\n\nfunction ButtonItem(props) {\n  return (\n    <button type=\"button\" class=\"btn btn-primary\" data-toggle=\"button\" aria-pressed=\"false\" autocomplete=\"off\">\n      {props.text}\n    </button>\n  );\n}\n\nexport default ButtonItem;\n\n\n","import React from 'react';\n\nimport './TaskItem.css';\nimport ButtonItem from '../ButtonItem/ButtonItem';\n\nfunction TaskItem(props) {\n  return (\n    <li class=\"list-group-item d-flex justify-content-between align-items-center\">\n      {props.text}\n      <span>\n      <ButtonItem text=\"Complete\" />\n      </span>\n    </li>\n  );\n}\n\nexport default TaskItem;\n\n","import React from 'react';\n\nimport './InputField.css';\n\nfunction InputField() {\n    return (\n        <div class=\"input-group\">\n            <input type=\"text\" class=\"form-control\" placeholder=\"Task Description\" aria-label=\"Task Description\"\n                aria-describedby=\"basic-addon2\" />\n            <div class=\"input-group-append\">\n                <button class=\"btn btn-outline-secondary\" type=\"button\">Add</button>\n                <button class=\"btn btn-outline-secondary\" type=\"button\">Clear</button>\n            </div>\n        </div>\n    );\n}\n\nexport default InputField;\n","import React from 'react';\n\nimport './MainSection.css';\nimport TaskItem from '../TaskItem/TaskItem';\nimport InputField from '../InputField/InputField';\n\n\nfunction MainSection() {\n    return (\n        <div class=\"container\">\n            <div class=\"jumbotron\">\n                <h1>Add New Task</h1>\n                <hr />\n                <InputField />\n            </div>\n            <div class=\"row\">\n                <div class=\"col-md-12 col-lg-12 col-sm-12\">\n                    <h2>Task List</h2>\n                    <ul class=\"list-group\">\n                        <TaskItem text=\"Task 1\" />\n                        <TaskItem text=\"Task 2\" />\n                        <TaskItem text=\"Task 3\" />\n                        <TaskItem text=\"Task 4\" />\n                        <TaskItem text=\"Task 5\" />\n                    </ul>\n                </div>\n            </div>\n        </div>\n    );\n}\n\nexport default MainSection;\n","import React from 'react';\n\nimport './Footer.css';\n\nfunction MainSection() {\n    return (\n        <div class=\"container\">\n            <hr/>\n            <footer>\n            <div class=\"row\">\n                <div class=\"col-md-6\">\n                    <p>Copyright &copy; 2020 Coffee&Code</p>\n                </div>\n                <div class=\"col-md-6 text-md-right\">\n                    <a href=\"foo\" class=\"text-dark\">Terms of Use</a>\n                    <span class=\"text-muted mx-2\">|</span>\n                    <a href=\"foo\" class=\"text-dark\">Privacy Policy</a>\n                </div>\n            </div>\n        </footer>\n        </div>\n    );\n}\n\nexport default MainSection;\n","import React from 'react';\n\nimport NavBar from './NavBar/NavBar';\nimport MainSection from './MainSection/MainSection';\nimport Footer from './Footer/Footer';\n\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <NavBar/>\n      <MainSection/>\n      <Footer/>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}