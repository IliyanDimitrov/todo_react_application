{"version":3,"sources":["NavBar/NavBar.js","Footer/Footer.js","ButtonItem/ButtonItem.js","TaskItem/TaskItem.js","InputField/InputField.js","RemainingTasks/RemainingTasks.js","App.js","serviceWorker.js","index.js"],"names":["NavBar","className","href","src","width","height","alt","type","data-toggle","data-target","id","MainSection","ButtonItem","props","class","aria-pressed","autocomplete","text","TaskItem","completed","dueDate","InputField","placeholder","aria-label","aria-describedby","RemainingTasks","count","App","useState","tasks","activeTasks","filter","task","completedTasks","timeDifference","currentDate","taskTimeFrame","Math","abs","ceil","length","map","key","Date","now","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.2a90b29d.chunk.js","sourcesContent":["import React from 'react';\n\nimport './NavBar.css';\n\nfunction NavBar() {\n    return (\n        <header>\n            <nav className=\"navbar navbar-expand-md navbar-light bg-light mb-3\">\n                <div className=\"container-fluid\">\n                    <a href=\"#top\" className=\"navbar-brand mr-3\">\n                        <img src=\"\" width=\"30\" height=\"30\"\n                            className=\"d-inline-block align-top\" alt=\"\" />\n                    Todo Application\n                </a>\n                    <button type=\"button\" className=\"navbar-toggler\" data-toggle=\"collapse\" data-target=\"#navbarCollapse\">\n                        <span className=\"navbar-toggler-icon\"></span>\n                    </button>\n                    <div className=\"collapse navbar-collapse\" id=\"navbarCollapse\">\n                        <div className=\"navbar-nav\">\n                            <a href=\"#top\" className=\"nav-item nav-link active\">Pending</a>\n                            <a href=\"#top\" className=\"nav-item nav-link\">Completed</a>\n                        </div>\n                        <div className=\"navbar-nav ml-auto\">\n                            <a href=\"#top\" className=\"nav-item nav-link\">Register</a>\n                            <a href=\"#top\" className=\"nav-item nav-link\">Login</a>\n                        </div>\n                    </div>\n                </div>\n            </nav>\n        </header>\n    );\n}\n\nexport default NavBar;\n","import React from 'react';\n\nimport './Footer.css';\n\nfunction MainSection() {\n    return (\n        \n            <footer>\n            <div className=\"row\">\n                <div className=\"col-md-6\">\n                    <p>Copyright &copy; 2020 ID</p>\n                </div>\n                <div className=\"col-md-6 text-md-right\">\n                    <a href=\"foo\" className=\"text-dark\">Terms of Use</a>\n                    <span className=\"text-muted mx-2\">|</span>\n                    <a href=\"foo\" className=\"text-dark\">Privacy Policy</a>\n                </div>\n            </div>\n        </footer>\n \n    );\n}\n\nexport default MainSection;\n","import React from 'react';\n\nimport './ButtonItem.css';\n\nfunction ButtonItem(props) {\n  return (\n    <button type=\"button\" class=\"btn btn-primary\" data-toggle=\"button\" aria-pressed=\"false\" autocomplete=\"off\">\n      {props.text}\n    </button>\n  );\n}\n\nexport default ButtonItem;\n\n\n","import React from 'react';\n\nimport './TaskItem.css';\nimport ButtonItem from '../ButtonItem/ButtonItem';\n\nfunction TaskItem(props) {\n  return (\n    <li className=\"list-group-item d-flex justify-content-between align-items-center\">\n      \n        {!props.completed && <span className=\"task__date\">{props.dueDate}h</span>} \n        {props.completed && <span className=\"task__completed\">{props.dueDate}</span>}\n\n      <span className=\"task__text\">\n        { props.text }\n      </span>\n\n      <span className=\"task__button\">\n        { (!props.completed && <ButtonItem text=\"Complete\" />) || (props.completed && <span>Completed</span>) }\n      </span>\n    </li>\n  );\n}\n\nexport default TaskItem;\n\n","import React from 'react';\n\nimport './InputField.css';\n\nfunction InputField() {\n    return (\n        <div class=\"input-group\">\n            <input type=\"text\" class=\"form-control\" placeholder=\"Task Description\" aria-label=\"Task Description\"\n                aria-describedby=\"basic-addon2\" />\n            <div class=\"input-group-append\">\n                <button class=\"btn btn-outline-secondary\" type=\"button\">Add</button>\n                <button class=\"btn btn-outline-secondary\" type=\"button\">Clear</button>\n            </div>\n        </div>\n    );\n}\n\nexport default InputField;\n","import React from 'react';\n\nimport './RemainingTasks.css';\n\nfunction RemainingTasks(props) {\nreturn <h2 className=\"remaining-tasks__status\">{ props.text } { props.count }</h2>;\n  \n}\n\nexport default RemainingTasks;\n\n","import React, { useState } from 'react';\n\nimport NavBar from './NavBar/NavBar';\nimport Footer from './Footer/Footer';\nimport TaskItem from './TaskItem/TaskItem';\nimport InputField from './InputField/InputField';\nimport RemainingTasks from \"./RemainingTasks/RemainingTasks\";\n\nimport \"./App.css\";\n\n\nfunction App() {\n\n  //const tasks = useState()[0];\n  //const setTasks = useState()[1];\n\n  //Destructuring method\n\n  const [tasks, setTasks] = useState([\n    { text: \"Task 1\", completed: false, dueDate: \"2020-05-16\", id: '0' },\n    { text: \"Task 2 Task 2\", completed: false, dueDate: \"2020-05-17\", id: '1' },\n    { text: \"Task 3 Task 3 Task 3\", completed: true, dueDate: \"2020-05-17\", id: '2' },\n    { text: \"Task 4 Task 4 Task 4 Task 4\", completed: false, dueDate: \"2020-05-17\", id: '3' },\n    { text: \"Task 5 Task 5 Task 5 Task 5 Task 5\", completed: false, dueDate: \"2020-05-18\", id: '' }\n  ]);\n\n  const activeTasks = tasks.filter(task => !task.completed);\n\n  const completedTasks = tasks.filter(task => task.completed);\n\n  const timeDifference = (currentDate, dueDate) => {\n\n    let taskTimeFrame = Math.abs(dueDate - currentDate);\n\n    return Math.ceil(taskTimeFrame / (1000 * 60 * 60));\n  };\n  \n\n  return (\n\n    <div className=\"App\" id=\"app\">\n      <NavBar />\n        <div className=\"container-fluid\">\n        <div className=\"jumbotron\">\n          <h1 className=\"display-4\">Add New Task</h1>\n          <hr />\n          <InputField />\n        </div>\n        <div className=\"row\">\n          <div className=\"col-md-12 col-lg-12 col-sm-12\">\n\n            <RemainingTasks text=\"Active: \" count={ activeTasks.length } />\n            <ul className=\"list-group\">\n              {activeTasks.map(task => <TaskItem key={ task.id } text={ task.text } completed={ task.completed } dueDate={ timeDifference(Date.now(), new Date(task.dueDate)) } />)}\n            </ul>\n\n            <br />\n\n            <ul className=\"list-group\">\n              <RemainingTasks text=\"Completed: \" count={ completedTasks.length } />\n              {completedTasks.map(task => <TaskItem key={ task.id } text={ task.text } completed={ task.completed } dueDate={ task.dueDate } />)}\n            </ul>\n          </div>\n        </div>\n        <hr />\n        <Footer />\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}